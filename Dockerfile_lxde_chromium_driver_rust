FROM debian:stable-slim 

# https://github.com/arktronic/docker-ubuntu-graphical/blob/master/Dockerfile 

ENV TERM xterm

# FROM HERE
# https://www.cyberciti.biz/faq/perl-warning-setting-locale-failed-in-debian-ubuntu/
ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_CTYPE="en_US.UTF-8" \
    LC_NUMERIC="en_US.UTF-8" \
    LC_TIME="en_US.UTF-8" \
    LC_COLLATE="en_US.UTF-8" \
    LC_MONETARY="en_US.UTF-8" \
    LC_MESSAGES="en_US.UTF-8" \
    LC_PAPER="en_US.UTF-8" \
    LC_NAME="en_US.UTF-8" \
    LC_ADDRESS="en_US.UTF-8" \
    LC_TELEPHONE="en_US.UTF-8" \
    LC_MEASUREMENT="en_US.UTF-8" \
    LC_IDENTIFICATION="en_US.UTF-8" \
    LC_ALL="en_US.UTF-8"

#lxqt vs xfce
#https://www.google.com/search?channel=fs&client=ubuntu-sn&q=lxqt+vs+xfce

# man 8 apt-get

# avoid user interaction
ARG DEBIAN_FRONTEND=noninteractive

# Automatically answer 'Yes' when using apt-get install
RUN echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90assumeyes


# CONFIGURE SHELL
SHELL ["/usr/bin/bash", "-c"]



# && locale-gen en_US.UTF-8 \
# && update-locale LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8 \
# && dpkg-reconfigure locales \


# set language first
RUN set -euxo \
    && apt-get update --yes \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --no-install-suggests --yes --quiet --quiet  apt-utils \
    locales \
    apt-transport-https \
    apt-utils 
# && locale-gen en_US.UTF-8 \
# && update-locale LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8 
# && dpkg-reconfigure locales

RUN set -euxo \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends --no-install-suggests --yes --quiet --quiet  alsa-utils \
    apulse \
    at-spi2-core \
    bash \
    ca-certificates \
    curl \
    chromium \
    chromium-driver \
    dbus \                   
    dbus-user-session \
    dbus-x11 \
    dialog \
    dos2unix \
    eterm \
    fonts-liberation \
    gnupg \
    libasound2 \
    libasound2-plugins \
    libatk1.0-0 \           
    libatk-bridge2.0-0 \
    libatspi2.0-0 \
    libc6-dev \     
    libcanberra-gtk-module  \
    libcups2 \       
    libdrm2 \                    
    libgbm1 \     
    libgl1-mesa-dri \
    libgtk-3-0 \ 
    libnspr4 \   
    libnss3 \            
    libpango1.0-0 \ 
    libpulse0 \   
    libssl-dev \
    libu2f-udev \
    libv4l-0 \         
    libvulkan1 \   
    libwayland-client0 \
    libxcomposite1 \
    libxdamage-dev \
    locales \
    locales-all \
    lxde-core \
    lxde-icon-theme \
    lxsession-default-apps \
    lxterminal \
    menu \
    perl \
    pkg-config\
    procps \
    pulseaudio \
    pulseaudio-utils \
    pulsemixer \
    sudo \
    unzip \
    upower \
    vim \
    wget \
    x11-utils \
    x11vnc \
    x11-xserver-utils \
    xdg-utils \
    xorgxrdp \
    xrdp \
    xvfb \
    notification-daemon \
    build-essential \
    inetutils-ping \
    net-tools \
    psmisc \
    iproute2 \
    obconf \
    x11-apps \
    && rm /etc/xrdp/rsakeys.ini /etc/xrdp/cert.pem /etc/xrdp/key.pem \
    && mv /usr/bin/lxpolkit /usr/bin/lxpolkit.disabled \
    && apt-get --yes autoclean \ 
    && apt-get --yes --auto-remove autoremove \
    && apt-get clean --yes \
    && rm --recursive --force /var/lib/apt/lists/* 
# && rm --recursive --force /var/lib/{apt,dpkg,cache,log}
#
#

COPY scripts/xstartup /root/.vnc/

RUN set -euxo \ 
    && touch /root/.Xresources \
    && touch /root/.Xauthority \
    && mkdir .vnc \
    && mkdir -p /scripts/ \
    && echo "export USER=root" >> /root/.bashrc

WORKDIR /root
# old RUN mkdir .vnc
# COPY scripts/xstartup /root/.vnc/
# RUN echo "export USER=root" >> /root/.bashrc


#  ENV USER root

# old move to RUN group above 
# RUN mkdir -p /scripts/
COPY scripts/bootstrap.sh \
    dbus/docker-dbus-entrypoint.sh \
    scripts/start_chromiumdriver.sh \
    /scripts/

RUN set -euxo \ 
    && chmod +x /scripts/bootstrap.sh \
    && chmod +x /scripts/docker-dbus-entrypoint.sh

# install chrome amd chromedriver
# FROM HERE
# https://gist.github.com/varyonic/dea40abcf3dd891d204ef235c6e8dd79?permalink_comment_id=3976763
ENV CHROMEDRIVER_DIR /chromedriver


# maybe double
# Set up the Chrome PPA
# RUN set -euxo \ 
#    && wget --quiet --output-document=- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
#    && echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list 

# RUN set -euxo \ 
#    && wget --quiet --output-document=- https://dl-ssl.google.com/linux/linux_signing_key.pub |gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/firefox.gpg \
#    && echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list 


# RUN set -euxo \
#     && apt-get update --yes \
#     && apt-get install --no-install-recommends --no-install-suggests --yes --quiet --quiet google-chrome-stable \
#     && CHROME_VERSION=$(google-chrome --product-version | cut --delimiter='.' --fields='1-3')  \
#     && DRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_$CHROME_VERSION") \
#     && echo "CHROMEDRIVER_DIR => ${CHROMEDRIVER_DIR}" \
#     && echo "DRIVER_VERSION => ${DRIVER_VERSION}" \
#     && mkdir -p $CHROMEDRIVER_DIR \
#     && echo "ALT => curl "https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$DRIVER_VERSION/linux64/chromedriver-linux64.zip" --output $CHROMEDRIVER_DIR/chromedriver.zip " \
#     && curl "https://storage.googleapis.com/chrome-for-testing-public/$DRIVER_VERSION/linux64/chromedriver-linux64.zip" --output $CHROMEDRIVER_DIR/chromedriver.zip \
#     && unzip $CHROMEDRIVER_DIR/chromedriver.zip -d $CHROMEDRIVER_DIR  \
#     && rm $CHROMEDRIVER_DIR/chromedriver.zip \
#     && locale-gen en_US.UTF-8 \
#     && update-locale LANG=en_US.UTF-8 LC_CTYPE=en_US.UTF-8 \
#     && apt-get --yes autoclean  \ 
#     && apt-get --yes --auto-remove autoremove   \
#     && apt-get clean --yes \
#     && rm --recursive --force /var/lib/apt/lists/* 
# && rm --recursive --force /var/lib/{apt,dpkg,cache,log}

# Put Chromedriver into the PATH
ENV PATH $CHROMEDRIVER_DIR:$PATH


# install rust
RUN set -euxo \ 
    # https://releases.rs/
    && export RUST_VERSION=1.79.0  \
    && export TMP_RUST_DIR=/tmp/rust  \
    && mkdir -p "${TMP_RUST_DIR}" \
    && cd "${TMP_RUST_DIR}"  \
    && curl -sLf "https://static.rust-lang.org/dist/rust-${RUST_VERSION}-x86_64-unknown-linux-gnu.tar.gz" | tar xvzf - -C "${TMP_RUST_DIR}" --strip-components=1 --exclude=rust-docs  \
    && ./install.sh --without=rust-docs  \
    && cd /tmp && rm -rf "${TMP_RUST_DIR}"

# new user
ENV PUID='1000' \
    PGID='1000' \
    USER='user' 

# useradd and suoers
RUN set -euxo \ 
    && groupadd --gid "$PGID" "$USER"  \
    && useradd --home-dir /home/$USER --shell /bin/bash --uid "$PUID" --gid "$PGID" "$USER"  \
    && mkdir /home/$USER \
    && chown -R $USER:$USER /home/$USER  \
    && usermod -aG sudo "$USER"  \
    && usermod -aG adm "$USER"  \
    && usermod -aG audio "$USER"  \
    && cp /etc/skel/.bashrc /home/user/  \
    && mkdir -p /etc/sudoers.d  \
    && echo "user ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/"${USER}" \
    && chmod 0440 /etc/sudoers.d/"$USER" \
    && cp /etc/skel/.bashrc /home/${USER}

# old
# setup docker_startup
# RUN mkdir /docker_startup.d
# ADD scripts/docker_startup.d/ /docker_startup.d 
# ADD scripts/docker_startup.sh /

# old
# RUN set -euxo \
#     && chmod 0755 /docker_startup.sh \
#     && chmod --recursive 0755 /docker_startup.d

# old
# ENTRYPOINT ["/scripts/docker-dbus-entrypoint.sh && /home/user/workspace/bootstrap.sh "]
# ENTRYPOINT ["/usr/bin/bash", "-c", "set -euxo && /scripts/docker-dbus-entrypoint.sh && /home/user/workspace/bootstrap.sh "]
# ENTRYPOINT ["/docker_startup.sh"]


# copy desktop and terminal settings
COPY desktop_settings/desktop-items-0.conf  /root/.config/pcmanfm/LXDE/desktop-items-0.conf
COPY desktop_settings/lxterminal.conf  /root/.config/lxterminal/lxterminal.conf

ENTRYPOINT ["/scripts/docker-dbus-entrypoint.sh"]


# remove empty space
# :g/^ /norm dw
# sort
# cat /tmp/t.txt |sort

# cd src && \
# docker buildx build --progress=plain --no-cache -t debian_lxde_chromium_rust -f src/Dockerfile_lxde_chromium_driver_rust "."

# w/o --no-cache
# cd src
# docker buildx build --progress=plain -t debian_lxde_chromium_rust -f src/Dockerfile_lxde_chromium_driver_rust "."

# docker run -ti debian_lxde_chrome bash    
# use start script => cd ./src && sh +x  start_container_lxde_chromium_rust_third.sh

# create ip6 network
# docker network create --ipv6 --subnet 2001:0DB8::/112 ip6net

# list docker network
# docker network ls

# https://bbs.archlinux.org/viewtopic.php?id=236020